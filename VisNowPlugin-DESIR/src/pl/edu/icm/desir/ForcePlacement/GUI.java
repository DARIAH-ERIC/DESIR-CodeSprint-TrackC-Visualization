/* ***** BEGIN LICENSE BLOCK *****
 *  
 * VisNowPlugin-DESIR
 * Copyright (C) 2018 onward University of Warsaw, ICM
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * ***** END LICENSE BLOCK ***** */

package pl.edu.icm.desir.ForcePlacement;

import javax.swing.event.ChangeEvent;
import static pl.edu.icm.desir.ForcePlacement.ForcePlacementShared.*;
import pl.edu.icm.visnow.engine.core.ParameterProxy;
import pl.edu.icm.visnow.engine.core.Parameters;
import pl.edu.icm.visnow.gui.widgets.RunButton;

/**
 * @author Krzysztof S. Nowinski (know@icm.edu.pl)
 * Warsaw University, Interdisciplinary Centre
 * for Mathematical and Computational Modelling
 */
public class GUI extends javax.swing.JPanel
{
    private Parameters parameters;

    /**
     * Creates new form GUI
     */
    public GUI()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        edgeR0Slider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        edgeConstSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        edgeSSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        unconnExpSlider = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        unconnR0Slider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        unconnConstSlider = new pl.edu.icm.visnow.gui.widgets.FloatSlider();
        jPanel3 = new javax.swing.JPanel();
        runButton = new pl.edu.icm.visnow.gui.widgets.RunButton();

        setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("force constants for edges"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel2.setText("scale factor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel3.setText("constant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel1.add(jLabel3, gridBagConstraints);

        edgeR0Slider.setMax(0.5F);
        edgeR0Slider.setMin(0.1F);
        edgeR0Slider.setShowingFields(false);
        edgeR0Slider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                edgeR0SliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(edgeR0Slider, gridBagConstraints);

        edgeConstSlider.setMax(1000.0F);
        edgeConstSlider.setMin(100.0F);
        edgeConstSlider.setShowingFields(false);
        edgeConstSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                edgeConstSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(edgeConstSlider, gridBagConstraints);

        edgeSSlider.setMax(1.2F);
        edgeSSlider.setMin(0.8F);
        edgeSSlider.setShowingFields(false);
        edgeSSlider.setVal(1.0F);
        edgeSSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                edgeSSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(edgeSSlider, gridBagConstraints);

        jLabel7.setText("r0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("force constants for unconnected pairs"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        unconnExpSlider.setMajorTickSpacing(2);
        unconnExpSlider.setMaximum(8);
        unconnExpSlider.setMinimum(2);
        unconnExpSlider.setMinorTickSpacing(2);
        unconnExpSlider.setPaintLabels(true);
        unconnExpSlider.setPaintTicks(true);
        unconnExpSlider.setSnapToTicks(true);
        unconnExpSlider.setToolTipText("");
        unconnExpSlider.setValue(4);
        unconnExpSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                unconnExpSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel2.add(unconnExpSlider, gridBagConstraints);

        jLabel4.setText("exponent");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel5.setText("r0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jLabel5, gridBagConstraints);

        jLabel6.setText("constant");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(jLabel6, gridBagConstraints);

        unconnR0Slider.setMax(2.0F);
        unconnR0Slider.setMin(0.1F);
        unconnR0Slider.setShowingFields(false);
        unconnR0Slider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                unconnR0SliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(unconnR0Slider, gridBagConstraints);

        unconnConstSlider.setMax(0.01F);
        unconnConstSlider.setMin(1.0E-5F);
        unconnConstSlider.setShowingFields(false);
        unconnConstSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                unconnConstSliderStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(unconnConstSlider, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        add(jPanel3, gridBagConstraints);

        runButton.addUserActionListener(new pl.edu.icm.visnow.gui.swingwrappers.UserActionListener()
        {
            public void userAction(pl.edu.icm.visnow.gui.swingwrappers.UserEvent evt)
            {
            }
            public void userChangeAction(pl.edu.icm.visnow.gui.swingwrappers.UserEvent evt)
            {
                runButtonUserChangeAction(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        add(runButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void edgeR0SliderStateChanged(ChangeEvent evt)//GEN-FIRST:event_edgeR0SliderStateChanged
    {//GEN-HEADEREND:event_edgeR0SliderStateChanged
        if (!edgeR0Slider.isAdjusting())
            parameters.set(CONNECTED_R, edgeR0Slider.getVal());
    }//GEN-LAST:event_edgeR0SliderStateChanged

    private void edgeConstSliderStateChanged(ChangeEvent evt)//GEN-FIRST:event_edgeConstSliderStateChanged
    {//GEN-HEADEREND:event_edgeConstSliderStateChanged
        if (!edgeConstSlider.isAdjusting())
            parameters.set(CONNECTED_C, edgeConstSlider.getVal());
    }//GEN-LAST:event_edgeConstSliderStateChanged

    private void unconnExpSliderStateChanged(ChangeEvent evt)//GEN-FIRST:event_unconnExpSliderStateChanged
    {//GEN-HEADEREND:event_unconnExpSliderStateChanged
        if (!unconnExpSlider.getValueIsAdjusting())
            parameters.set(UNCONNECTED_EXPONENT, unconnExpSlider.getValue());
    }//GEN-LAST:event_unconnExpSliderStateChanged

    private void unconnR0SliderStateChanged(ChangeEvent evt)//GEN-FIRST:event_unconnR0SliderStateChanged
    {//GEN-HEADEREND:event_unconnR0SliderStateChanged
        if (!unconnR0Slider.isAdjusting())
            parameters.set(UNCONNECTED_R, unconnR0Slider.getVal());
    }//GEN-LAST:event_unconnR0SliderStateChanged

    private void unconnConstSliderStateChanged(ChangeEvent evt)//GEN-FIRST:event_unconnConstSliderStateChanged
    {//GEN-HEADEREND:event_unconnConstSliderStateChanged
        if (!unconnConstSlider.isAdjusting())
            parameters.set(UNCONNECTED_C, unconnConstSlider.getVal());
    }//GEN-LAST:event_unconnConstSliderStateChanged

    private void runButtonUserChangeAction(pl.edu.icm.visnow.gui.swingwrappers.UserEvent evt)//GEN-FIRST:event_runButtonUserChangeAction
    {//GEN-HEADEREND:event_runButtonUserChangeAction
        parameters.set(RUNNING_MESSAGE, (RunButton.RunState) evt.getEventData());
    }//GEN-LAST:event_runButtonUserChangeAction

    private void edgeSSliderStateChanged(ChangeEvent evt)//GEN-FIRST:event_edgeSSliderStateChanged
    {//GEN-HEADEREND:event_edgeSSliderStateChanged
        if (!edgeSSlider.isAdjusting())
            parameters.set(CONNECTED_S, edgeSSlider.getVal());
    }//GEN-LAST:event_edgeSSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected pl.edu.icm.visnow.gui.widgets.FloatSlider edgeConstSlider;
    protected pl.edu.icm.visnow.gui.widgets.FloatSlider edgeR0Slider;
    protected pl.edu.icm.visnow.gui.widgets.FloatSlider edgeSSlider;
    protected javax.swing.JLabel jLabel2;
    protected javax.swing.JLabel jLabel3;
    protected javax.swing.JLabel jLabel4;
    protected javax.swing.JLabel jLabel5;
    protected javax.swing.JLabel jLabel6;
    protected javax.swing.JLabel jLabel7;
    protected javax.swing.JPanel jPanel1;
    protected javax.swing.JPanel jPanel2;
    protected javax.swing.JPanel jPanel3;
    protected pl.edu.icm.visnow.gui.widgets.RunButton runButton;
    protected pl.edu.icm.visnow.gui.widgets.FloatSlider unconnConstSlider;
    protected javax.swing.JSlider unconnExpSlider;
    protected pl.edu.icm.visnow.gui.widgets.FloatSlider unconnR0Slider;
    // End of variables declaration//GEN-END:variables


    void setParameters(Parameters parameters)
    {
        this.parameters = parameters;
    }
    
    void updateGUI(ParameterProxy parameters)
    {
        edgeR0Slider.setVal(parameters.get(CONNECTED_R));
        edgeConstSlider.setVal(parameters.get(CONNECTED_C));
        unconnExpSlider.setValue(parameters.get(UNCONNECTED_EXPONENT));
        unconnR0Slider.setVal(parameters.get(UNCONNECTED_R));
        unconnConstSlider.setVal(parameters.get(UNCONNECTED_C));
    }
}
